a <- list("1", "2", "3")
b <- list("1", "2", "3")
a == b
apply(a, b, "==")
help(apply)
setdiff(a, b)
help(setdiff)
setequal(a, b)
fix(b)
setequal(a, b)
apply(a, 2, "==", b)
apply(a, 1, "==", b)
apply(a, c(1), "==", b)
apply(a, c(2), "==", b)
d <- data.frame(actual=a, expected=b)
d
a
b
a <- c("1", "2", "3")
b <- c("2", "1", "3")
d <- data.frame(actual=a, expected=b)
d
apply(d, 1, "==")
apply(d, 2, "==")
library(plyr)
library(dplyr)
mutate(d, eq=actual==expected)
d2 <- mutate(d, eq=actual==expected)
d2 %.% summarise()
d2 %.% summarise(eq = n())
d2 %.% filter(eq)
d2 %.% filter(!eq
)
source("answer.R")
source("answer.R")
check.answer(c("1"))
length(answer)
source("answer.R")
source("answer.R")
check.answer(c("1"))
source("answer.R")
check.answer(c("1"))
check.answer(rep("1", 100))
seq(100)
check.answer(seq(100)
)
source("answer.R")
check.answer(seq(100)
)
source("answer.R")
check.answer(seq(100))
source("answer.R")
check.answer(seq(100))
source("answer.R")
check.answer(seq(100))
source("answer.R")
check.answer(seq(100))
base <- seq(100)
class(base)
as.character(base)
source("cyclic.R")
source("cyclic.R")
nil
null
NULL
merge(seq.base, seq.fizz)
source("cyclic.R")
merge(seq.base, seq.fizz)
data.frame(seq.base, seq.fizz)
seq.fizz
source("cyclic.R")
source("cyclic.R")
source("cyclic.R")
source("cyclic.R")
source("cyclic.R")
seq.fizz
limit=100
source("cyclic.R")
source("cyclic.R")
df <- data.frame(b=seq.base, f=seq.fizz, b=seq.buzz)
df <- data.frame(b=seq.base, f=unlist(seq.fizz), b=seq.buzz)
df <- data.frame(b=seq.base, f=unlist(seq.fizz), b=unlist(seq.buzz)
)
source("cyclic.R")
df <- data.frame(b=seq.base, f=unlist(seq.fizz), b=unlist(seq.buzz))
df
t(df)
tdf <- t(df)
tdf[1]
tdf[1,]
tdf[,1]
as.list(tdf)
as.list(df)
tdf[,1]
length(tdf[,1])
length(tdf[,1], na.rm=T)
length(na.omit(tdf[,1]))
source("cyclic.R")
source("cyclic.R")
paste(tdf[,1])
paste(tdf[,1], sep="")
paste(tdf[2:3,1], sep="")
paste(tdf[2:3,], sep="")
source("cyclic.R")
source("cyclic.R")
limit=100
source("cyclic.R")
rm(tdf)
cat(df[1,])
cat(unlist(df[1,])
)
cat(unlist(df[1,], sep="")
)
df
ifelse(length(na.omit(df)), 1, 0)
transform(df, a=2)
transform(df, a=ifelse(TRUE, 1, 0))
transform(df, a=ifelse(length(na.omit(`1`)), 1, 0))
apply(df, length(na.omit()))
apply(df, 2, length(na.omit()))
apply(df, 1, length(na.omit()))
apply(df, 1, function(x) {length(na.omit(x))})
apply(df, 2, function(x) {length(na.omit(x))})
apply(df, 1, function(x) {length(na.omit(x))})
cbind(df, c=apply(df, 1, function(x) {length(na.omit(x))}))
df <- cbind(df, c=apply(df, 1, function(x) {length(na.omit(x))}))
answer <- ifelse(df$c == 1, df$base, paste(df$fizz, df$buzz, sep=""))
source("answer.R")
check(answer)
check.answer(answer)
source("answer.R")
source("answer.R")
check.answer(answer)
source("answer.R")
check.answer(answer)
answer
answer
check.answer(answer)
source("answer.R")
check.answer(answer)
source("answer.R")
check.answer(answer)
r
length(r)
summary(r)
dim(r)
dim(r)$x
dim(r)[1]
nrow(df)
ncol(df)
nrow(r)
ncol(r)
source("answer.R")
check.answer(answer)
df
df %.% filter(!(fizz == buzz))
source("main.R")
source("main.R")
source("main.R")
source("main.R")
cy
cy %.% mutate(x = function(k) length(k))
cy %.% mutate(x = function(k) {length(k)})
apply(cy, 1, function(k) length(k))
source("main.R")
5
source("main.R")
source("main.R")
source("main.R")
source("main.R")
df
source("main.R")
df
class(df)
source("main.R")
source("main.R")
df
class(df)
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source('~/space/code/fizzes/Rfizz/cyclic.R')
source("main.R")
source("main.R")
source("main.R")
cy
source("main.R")
source("main.R")
source("main.R")
source("main.R")
df
summary(df)
ddply(df, "base")
ddply(df, "base", function(x) print(x))
ddply(df, "base", function(x) print(x$mult)
)
ddply(df, "base", m = function(){length(na.omit(x))}())
df %.% mutate(m = function(x){length(na.omit(x))}())
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source("main.R")
source('~/code/fizzes/Rfizz/main.R')
source('~/code/fizzes/Rfizz/main.R')
mutate(df, a = function(x) paste(x, collapse=""))
ddply(df, function(x) paste(x, collapse=""))
apply(df, 1, function(x) paste(x, collapse=""))
apply(df, 1, function(x) paste(na.omit(x), collapse=""))
apply(df, 1, function(x) ifelse(x["mult"] == 1, 1, paste(na.omit(x), collapse=""))
)
apply(df, 1, function(x) ifelse(x$mult == 1, 1, paste(na.omit(x), collapse=""))
)
apply(df, 1, function(x) ifelse(x["mult"] == 1, base, paste(na.omit(x), collapse="")))
apply(df, 1, function(x) ifelse(x["mult"] == 1, x["base"], paste(na.omit(x), collapse="")))
source('~/code/fizzes/Rfizz/main.R')
source('~/code/fizzes/Rfizz/main.R')
df
mutate(df, r = ifelse(mult==1, base, "ou"))tro
mutate(df, r = ifelse(mult==1, base, "ou"))
mutate(df, r = ifelse(mult==1, base, paste0(fizz, buzz)))
mutate(df, r = ifelse(mult==1, base, paste0(na.omit(fizz), buzz)))
mutate(df, r = ifelse(mult==1, base, paste0(na.omit(fizz), na.omit(buzz))))
mutate(df, r = ifelse(mult==1, base, paste0(na.omit(fizz), buzz)))
source('~/code/fizzes/Rfizz/main.R')
source('~/code/fizzes/Rfizz/main.R')
source('~/code/fizzes/Rfizz/main.R')
source('~/code/fizzes/Rfizz/main.R')
cy
source('~/code/fizzes/Rfizz/main.R')
library("doMC")
registerDoMC(cores=8)
foreach(i=10, .combine=c) %do% matrix(rnorm(100)) %*% t(matrix(rnorm(100)))
foreach(i=10, .combine=c) %do% matrix(rnorm(300)) %*% t(matrix(rnorm(300)))
foreach(i=10, .combine=c) %do% matrix(rnorm(1000)) %*% t(matrix(rnorm(1000)))
foreach(i=10, .combine=c) %do% det(matrix(rnorm(100)) %*% t(matrix(rnorm(100))))
foreach(i=10, .combine=c) %do% det(matrix(rnorm(500)) %*% t(matrix(rnorm(500))))
foreach(i=10, .combine=c) %do% det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000))))
foreach(i=1:10, .combine=c) %do% det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000))))
foreach(i=1:10, .combine=c) %dopar% det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000))))
foreach(i=1:20, .combine=c) %dopar% det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000))))
foreach(i=1:50, .combine=c) %dopar% det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000))))
foreach(i=1:100, .combine=c) %dopar% det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000))))
foreach(i=1:10, .combine=list) %dopar% det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000))))
foreach(i=1:10, .combine=function(x) list(n=x$i, x=x$x)) %dopar% list(n=i, x=det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000))))
foreach(i=1:10, .combine=function(x) list(n=x$i, x=x$x)) %dopar% list(n=i, x=det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000)))))
foreach(i=1:10, .combine=function(x) print(x) %dopar% list(n=i, x=det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000)))))
foreach(i=1:10, .combine=function(x) print(x)) %dopar% list(n=i, x=det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000)))))
foreach(i=1:10, .combine=function(x, y) print(x)) %dopar% list(n=i, x=det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000)))))
foreach(i=1:10, .combine=function(x, y) print(x)) %dopar% list(n=i, x=i + det(matrix(rnorm(1000)) %*% t(matrix(rnorm(1000)))))
foreach(i=1:10, .combine=function(x, y) print(x)) %dopar% list(n=i, x=i)
foreach(i=1:10, .combine=function(x, y) print(x);print(y)) %dopar% list(n=i, x=i)
foreach(i=1:10, .combine=function(x, y) {print(x);print(y)}) %dopar% list(n=i, x=i)
foreach(i=1:10, .combine=function(x, y) {print(x);print(y)}) %dopar% list(idx=i, result=i^2)
foreach(i=1:10, .combine=function(x, y) {print(y)}) %dopar% list(idx=i, result=i^2)
foreach(i=1:10, .combine=function(x, y) {print(y)}, .inorder=FALSE) %dopar% list(idx=i, result=i^2)
foreach(i=1:10, .combine=function(x, y) {if y$idx%10==0 print(y)}, .inorder=FALSE) %dopar% list(idx=i, result=i^2)
foreach(i=1:10, .combine=function(x, y) {if(y$idx%10==0) print(y)}, .inorder=FALSE) %dopar% list(idx=i, result=i^2)
foreach(i=1:10, .combine=function(x, y) {if(y$idx%%10==0) print(y)}, .inorder=FALSE) %dopar% list(idx=i, result=i^2)
foreach(i=1:100, .combine=function(x, y) {if(y$idx%%10==0) print(y)}, .inorder=FALSE) %dopar% list(idx=i, result=i^2)
source('~/space/code/fizzes/Rfizz/parallel.R')
parallel()
source('~/space/code/fizzes/Rfizz/parallel.R')
source('~/space/code/fizzes/Rfizz/parallel.R')
FB.MAP
source('~/space/code/fizzes/Rfizz/parallel.R')
FB.MAP
FB.MAP[FB.MAP$key==3]
FB.MAP[FB.MAP$key==3,]
FB.MAP[FB.MAP$key==3,]$value
source('~/space/code/fizzes/Rfizz/parallel.R')
FB.MAP[FB.MAP$key==3,]$value
source('~/space/code/fizzes/Rfizz/parallel.R')
map.fizzbuzz(1:2)
FB.MAP[c(1, 1).]
FB.MAP[c(1, 1),]
FB.MAP[c(1, 1),]$value
1:10 % 15
1:10 %% 15
1:20 %% 15
FB.MAP$key==4
which(FB.MAP$key==4)
which(FB.MAP$key==3)
size(which(FB.MAP$key==4))
length(which(FB.MAP$key==4))
length(which(FB.MAP$key==3))
is.numeric(which(FB.MAP$key==4))
which(FB.MAP$key==3) > 0
which(FB.MAP$key==4) > 0
source('~/space/code/fizzes/Rfizz/parallel.R')
map.fizzbuzz(1:10)
source('~/space/code/fizzes/Rfizz/parallel.R')
map.fizzbuzz(1:10)
map.fizzbuzz(1:15)
parallel()
unlist(parallel())
source('~/space/code/fizzes/Rfizz/parallel.R')
parallel()
source('~/space/code/fizzes/Rfizz/parallel.R')
parallel()
source('~/code/fizzes/Rfizz/main.R')
source('~/code/fizzes/Rfizz/main.R')
source('~/code/fizzes/Rfizz/main.R')
source('~/space/code/fizzes/Rfizz/parallel.R')
parallel()
source('~/space/code/fizzes/Rfizz/parallel.R')
parallel()
source('~/space/code/fizzes/Rfizz/parallel.R')
parallel()
source('~/space/code/fizzes/Rfizz/parallel.R')
parallel()
source('~/space/code/fizzes/Rfizz/parallel.R')
parallel()
result <- parallel()
result
colnames(result)
sort(colnames(result))
unlist(result)
cast(results)
foreach(c=colnames(results), .combine=c) %do% results[c]
for(col %in% colnames(results)) print(results[col])
for(col in colnames(results)) print(results[col])
foreach(c=colnames(results), .combine=c) %do% result[c]
foreach(c=colnames(result), .combine=c) %do% result[c]
foreach(c=colnames(result), .combine=c) %do% result[[c]
foreach(c=colnames(result), .combine=c) %do% result[[c]]
for(col in colnames(result)) print(result[col])
for(col in colnames(result)) print(result[col,])
for(col in colnames(result)) print(result[,col])
foreach(c=colnames(result), .combine=c) %do% result[,c]
foreach(col=colnames(result), .combine=c) %do% result[,col]
for(col in colnames(result)) print(result[,col])
r <- list(); for(col in colnames(result)) c(r, result[,col])
r
for(col in colnames(result)) print(result[,col])
r <- list(); for(col in colnames(result)) list(r, result[,col])
r
r
r <- numeric()
r
r <- character()
r
r <- character(); for(col in colnames(result)) c(r, result[,col])
r
for(col in colnames(result)) c(r, result[,col])
r <- character(); for(col in colnames(result)) r <- c(r, result[,col])
source('~/code/fizzes/Rfizz/main.R')
result
colnames(result)
sort(colnames(result))
class(sort(colnames(result)))
source('~/code/fizzes/Rfizz/main.R')
source('~/space/code/fizzes/Rfizz/parallel.R')
source('~/code/fizzes/Rfizz/main.R')
source('~/code/fizzes/Rfizz/main.R')
source('~/space/code/fizzes/Rfizz/parallel.R')
parallel()
source('~/space/code/fizzes/Rfizz/parallel.R')
parallel()
source('~/space/code/fizzes/Rfizz/parallel.R')
parallel()
source('~/space/code/fizzes/Rfizz/parallel.R')
parallel()
source('~/code/fizzes/Rfizz/main.R')
